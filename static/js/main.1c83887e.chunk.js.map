{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","img","menu","setState","name","_this2","react_default","a","createElement","id","className","items","map","index","style","concat","onClick","clicked","bind","key","src","width","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1c83887e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      color : 'Merah',\r\n      img: 'Merah.jpg',\r\n    };\r\n  }\r\n\r\n  //Untuk memperbarui state sesuai dengan menu yang dipilih\r\n  clicked(menu){\r\n    this.setState({\r\n      color: menu.color,\r\n      img: menu.img,\r\n      name: menu.name,\r\n    });\r\n  }\r\n//menusaya(){\r\n//  var gambar;\r\n //   if (this.state.active.toLowerCase() === 'Merah'){\r\n   // gambar = \"Merah\";\r\n   // }\r\n    //else if(this.state.active.toLowerCase() === 'Kuning'){\r\n    //  gambar = \"Kuning\";\r\n  //  }\r\n  //  else if(this.state.active.toLowerCase() === 'Biru'){\r\n  //    gambar = \"Biru\";\r\n  //  }\r\n   // else if(this.state.active.toLowerCase() === 'Hijau'){\r\n    //  gambar = \"Hijau\";\r\n    //}\r\n // return <img src={gambar+\".jpg\"} width=\"200\"></img>\r\n//}\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"app\">\r\n        {/*\r\n          map akan loop sebanyak menu yang didefinisikan\r\n        */}\r\n        {/*\r\n          kemudian mengembalikan elemen <a/>\r\n        */}\r\n          <nav className=\"nav\">\r\n            {\r\n              this.props.items.map(\r\n                (menu, index)=>{\r\n                  var style = 'menu';\r\n\r\n                  if(this.state.color === menu.color){\r\n                    style = `${style} is-active`;\r\n                  }\r\n\r\n                  return (\r\n                    <a className={style+\" \"+menu.color}\r\n                      onClick={\r\n                        this.clicked.bind(this,menu) \r\n                      }\r\n                      key={\r\n                        index\r\n                      }\r\n                    >\r\n                    {menu.name}\r\n                    </a>\r\n                  );\r\n                }\r\n              )\r\n            }\r\n        </nav>\r\n\r\n         <div className=\"info\">\r\n            ini adalah <span className={\"selected \"+this.state.color}>\r\n            {this.state.name}</span><br/><br/>\r\n            <img src={this.state.img} width=\"200\"></img>\r\n           {/*{this.menusaya()}*/} \r\n        </div>\r\n\r\n\r\n          </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst items = [\r\n    {\r\n        name : \"Mulan\",\r\n        color : 'Merah',\r\n        img : 'Merah.jpg',\r\n    },\r\n    {\r\n        name : \"Belle\",\r\n        color : 'Kuning',\r\n        img : 'Kuning.jpg',\r\n    },\r\n    {\r\n        name : \"Cinderella\",\r\n        color : 'Biru',\r\n        img : 'Biru.jpg',\r\n    },\r\n    {\r\n        name : \"Jasmine\",\r\n        color : 'Hijau',\r\n        img : 'Hijau.jpg',\r\n    },\r\n];\r\n\r\nReactDOM.render(<App items={items}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}